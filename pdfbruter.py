#Do not try to copy or modify script
import base64
exec(base64.b64decode('import pikepdf
import platform
import os, time, sys, datetime
import colorama
colorama.init()
from termcolor import colored

# Done importing necessary modules

e = datetime.datetime.now()		#Date function



#Locking the PDF script and requiring password to unlock it

def run():
	print("")
	print("------------------------------")
	print(colored("[x] PDF-BRUTER HAS BEEN LOCKED !! [x] ",'red'))
	print("------------------------------")
	password = input("\033[1;92m[!]\033[0m Enter Password to Continue \033[1;92m[!]\033[0m: ")
	if password == "pdfbruter":
		print(colored("[*] Checking Password... [!]",'green'))
		time.sleep(2)
		print(colored("[!] Password Correct, you may continue!! [!]",'green'))
		time.sleep(1)
	elif password == "Pdfbruter":
		print(colored("[*] Checking password... [*]",'green'))
		time.sleep(2)
		print(colored("[!] Password Correct, you may continue!! [!]",'green'))
		time.sleep(1)
	else:
		print(colored("[*] Checking password... [*]",'green'))
		time.sleep(2)
		print(colored("[x] Incorrect Password, Exiting.... [x]",'red'))
		time.sleep(1)
		quit()
		sys.exit()



def cls():
	if os.name == "linux":
		os.system("clear")
	elif os.name == "nt":
		os.system("clear")
	else:
		os.system("cls || clear")
		
cls()

print(colored("",'red'))
logo = """\033[1;93m
__________________  ___________      __________                __                
\______   \______ \ \_   _____/      \______   \_______ __ ___/  |_  ___________
 |     ___/|    |  \ |    __)  ______ |    |  _/\_  __ \  |  \   __\/ __ \_  __ \
 |    |    |    `   \|     \  /_____/ |    |   \ |  | \/  |  /|  | \  ___/|  | \/
 |____|   /_______  /\___  /          |______  / |__|  |____/ |__|  \___  >__|   
                  \/     \/                  \/                         \/      
"""

print(logo)


def usage():
	print (colored("++++++++++++++KINDLY READ BELOW FIRST!!!++++++++++++++",'red'))
	print ("")
	print (colored("DISCLAIMER: Usage of this script without prior content is deemed illegal and developer of this script will not be held liable for the misuse of this script!!",'red'))
	print (colored("++++++++++++++Script was Made and Developed by AnonyminHack5+++++++++++",'red'))
	print ("")
	print (colored("Once you have read the disclaimer, Hit enter on your keyboard to continue",'yellow'))
	time.sleep(0.5)
	os.system("read a1")
usage()


argv=False
try:
	if (sys.argv[1]=="-version" or sys.argv[1]=="--version"):
		print (colored("PDFBRUTER - version 1.0", 'green'))
		argv=True
	else:
		pass
except:
	pass

def print_help():
	print ("""
	Usage:	python3 pdfbruter.py [options] 
	Eg:	python3 pdfbruter.py --usage
	
	help		:	Show this help menu.
	quit		: 	Terminates the script.
	-author		: 	Shows the Author who made this script.
	--version	: 	Displays the version of PDFBruter.
	-update		: 	Update PDF-BRUTER to a newer version.
	--help		: 	Displays This help menu again! haha.
	--usage		: 	Tells you how to use the script.
	--system	:	Shows you the current system you are using.
	--notice	:	Important Warning on the script. \033[1;92m[!IMPORTANT!]\033[0m
	-password	:	Displays the password for the script.\033[1;92m[!IMPORTANT!]\033[0m
	
	Kindly report bugs to me at : AnonyminHack5@protonmail.com
	""")
	
try:
	if (sys.argv[1]=="-help" or sys.argv[1]=="--help"):
		print_help()
		argv=True
	else:
		pass
except:
	pass

if (argv==True):
	sys.exit()
else:
	pass
	
os.system("clear || cls")

try:
	if (sys.argv[1]=="-author" or sys.argv[1]=="--author"):
		print ("This script was coded by AnonyminHack5 : Follow his code on Github: TermuxHackz")
		argv=True
	else:
		pass
except:
	pass

if (argv==True):
	sys.exit()
else:
	pass
	
os.system("clear || cls")

try:
	if (sys.argv[1]=="-system" or sys.argv[1]=="--system"):
		if sys.platform == "linux":
			os.system("figlet Linux System")
		elif sys.platform == "ubuntu":
			os.system("figlet Ubuntu System")
		elif sys.platform == "win32":
			os.system("figlet Windows System")
		elif sys.platform == "termux":
			os.system("figlet Termux System")
		else:
			os.system("figlet Other System")
		
	
		
		argv=True
	else:
		pass
except:
	pass

if (argv==True):
	sys.exit()
else:
	pass
	


try:
	if (sys.argv[1]=="quit" or sys.argv[1]=="-quit"):
		print(colored("Program will be Terminated now!!...Come back soon!!",'red'))
		time.sleep(0.7)
		os.system("figlet -f slant BYE!! | lolcat")
		argv=True
	else:
		pass
except:
	pass

if (argv==True):
	sys.exit()
else:
	pass
	
try:
	if (sys.argv[1]=="-usage" or sys.argv[1]=="--usage"):
		os.system("figlet USAGE | lolcat")
		print ("\033[1;36m[\033[0m\033[1;92m!\033[0m\033[1;36m] Type \033[0m\033[1;92mpython3 pdfbruter.py\033[0m \033[1;36mto start the PDFBRUTER Script [\033[0m\033[1;92m!\033[0m\033[1;36m]\033[0m\n")
		time.sleep(0.6)
		argv=True
	else:
		pass
except:
	pass

if (argv==True):
	sys.exit()
else:
	pass


try:
	if (sys.argv[1]=="-notice" or sys.argv[1]=="--notice"):
		print(colored("KINDLY Make sure the PDF file path currently exists so that Script will work and will bruteforce it well. If not script will continue to bruteforce nothing.!!!!",'red'))
		print(colored("+++++++++++I HOPE YOU LISTEN AND HEED TO INSTRUCTIONS+++++++++++",'red'))
		argv=True
	else:
		pass
except:
	pass

if (argv==True):
	sys.exit()
else:
	pass
	

try:
	if (sys.argv[1]=="-password" or sys.argv[1]=="--password"):
		print ("\033[1;34mThe password is: => \033[0m\033[1;92mpdfbruter\033[0m")
		print(colored("Kindly Star and Fork this repo to support AnonyminHack5 developer of this Script",'green'))
		time.sleep(1)
		argv=True
	else:
		pass
except:
	pass

if (argv==True):
	sys.exit()
else:
	pass


try:
	if (sys.argv[1]=="-update" or sys.argv[1]=="--update"):
		cls()
		print(colored("[*] Checking Updates ..!![*]",'green'))
		time.sleep(2)
		print("[!] Installing new version of PDF-BRUTER into your terminal [!]")
		time.sleep(1)
		print("-----------------------------")
		os.system("cd $HOME")
		if os.name == "Linux":
			os.system("sudo rm -rf pdfbrute")
		else:
			os.system("rm -rf pdfbrute")
		os.system("git clone https://github.com/TermuxHackz/pdfbrute")
		os.system("cd pdfbrute")
		if os.name == "Linux":
			os.system("sudo chmod +x *")
		else:
			os.system("chmod 777 *")
		os.system("python3 dependencies.py")
		sys.exit()
		quit()
		argv=True
	else:
		pass
except:
	pass

if (argv==True):
	sys.exit()
else:
	pass	


smalllogo = """\033[1;94m
╭━┳━━┳━━╮╱╭━━┳━┳┳┳━━┳━┳━╮
┃╋┣╮╮┃━┳┻━┫╭╮┃╋┃┃┣╮╭┫┳┫╋┃
┃╭╋┻╯┃╭┻━━┫╭╮┃╮┫┃┃┃┃┃┻┫╮┫
╰╯╰━━┻╯╱╱╱╰━━┻┻┻━╯╰╯╰━┻┻╯
"""

print(smalllogo)

file = open("rockyou.txt")
print(colored("[!] Make sure PDF Path file exists before you Start, else wont work [!]",'red'))
print("")
file_path = input("\033[1;96m[~]Put in path of PDF file [~]~>: \033[0m")
run()


print ("")
print ("\033[1;37m+++++++++Starting Time of BruteForce: %s:%s:%s+++++++++\033[0m" % (e.hour, e.minute, e.second))
time.sleep(2)
print ("")
print ("\tHit the enter button when you are ready!!")
os.system("read a1")
print ("")
print(colored("[*] BruteForce Has Started [*]",'green'))
time.sleep(2)

print ("")
for password in file:
	try:
		with pikepdf.open(file_path,password.strip()) as pdf:
			print(colored("Password Found: {}".format(password),'green')) #Gets the password already
			print ("\033[1;34m[*] BruteForce Has Ended at: %s:%s:%s [*]\033[0m" % (e.hour, e.minute, e.second))
			break
			
	except:
			print(colored("Trying these Passwords: {}".format(password),'red')) # Getting lists of possible passwords.
			continue
'))
